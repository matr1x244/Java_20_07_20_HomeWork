public class Main {

    public static void main(String[] args) {


//1. Задать целочисленный массив, состоящий из элементов 0 и 1.
// Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. С помощью цикла и условия заменить 0 на 1, 1 на 0;


        int[] invert = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0}; //массив
        replacement(invert);

    }

    public static int replacement(int[] arr) {
        for (int i = 0; i < arr.length; i++) { // условие для прохождения цикла
            if (arr[i] == 1) { // если i то равно 1
                arr[i] = 0; // тогда i будет 0
            } else { // если не 0
                arr[i] = 1; // то i будет равно 0
            }
        }
        return arr[0]; // вернуть 0
    }


// 2. Задать пустой целочисленный массив размером 8.
// С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21;


    int[] array = new int[8]; // массив размером 8
    int j = 0; // значение 0
    int full = array.length;
        for(int i = 0;i < full; ++i, j = j +3){ // шаг +3
        array[i] = j; // i равно j
        System.out.println(j);
    }


//3. Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6 умножить на 2;


    int[] masive = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1}; // массив
        for(int i = 0; i<masive.length; i++){ // условие для прохождения цикла
        if (masive[i] < 6) { // определяем числа меньше 6
            masive[i] = masive[i] * 2; // умножаем найденные числа меньше 6 на 2
            //System.out.print(masive[i]);
        }


//4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое),
// и с помощью цикла(-ов) заполнить его диагональные элементы единицами;

        int[][] arr = new int[4][4]; // двумерный массив 4 на 4
        for (int i = 0; i < arr.length; i++) { // условие для прохождения цикла
            for (int j = 0, x = arr[i].length - 1; j < arr[i].length; j++, x--) {
                if (i == j || i == x) arr[i][j] = 1;
            }else{
                arr[i][j] = 0;
            }

        }
    }
}
